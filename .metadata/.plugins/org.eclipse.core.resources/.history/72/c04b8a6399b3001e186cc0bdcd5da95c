package th.ac.ku.kps.eng.cpe.controller;

import java.io.*;
import java.util.ArrayList;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.databind.ObjectMapper;

import th.ac.ku.kps.eng.cpe.dao.CustomerDAO;
import th.ac.ku.kps.eng.cpe.entity.Customer;
import th.ac.ku.kps.eng.cpe.entity.Person;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class CustomerServlet extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		// Set up a PrintWriter to write the response with UTF-8 encoding
		resp.setCharacterEncoding("UTF-8");
		// Set up a PrintWriter to write the response
		PrintWriter out = resp.getWriter();

		// Set the content type of the response to JSON
		resp.setContentType("application/json");

		// Retrieve a list of customers from the CustomerDAO (assumed to be a data
		// access object)
		ArrayList<Customer> listOfCustomers = CustomerDAO.getAllCustomers();

		// Create a ByteArrayOutputStream to write the JSON data
		ByteArrayOutputStream op = new ByteArrayOutputStream();

		// Create an ObjectMapper to convert Java objects to JSON
		ObjectMapper mapper = new ObjectMapper();

		// Write the list of customers as JSON to the ByteArrayOutputStream
		mapper.writeValue(op, listOfCustomers);

		// Log the request body to the console
		System.out.println("Request Body:\n" + getBody(req));

		// Convert the ByteArrayOutputStream to a byte array
		byte[] data = op.toByteArray();

		// Write the JSON data to the response PrintWriter
		out.write(new String(data).toString());

	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setCharacterEncoding("UTF-8");
		PrintWriter writer = resp.getWriter();
		resp.setContentType("application/json");

		String body = getBody(req);
		System.out.println("Request Body:\n" + body);

		try {
			ObjectMapper obj = new ObjectMapper();
//			Person p = obj.readValue(body, Person.class);
//			writer.write(obj.writeValueAsString(p));

			Customer newCustomer = obj.readValue(body, Customer.class);
			// Perform any necessary operations with the newCustomer object
			// For example, you might want to add it to the list of customers in your DAO
			ArrayList<Customer> listOfCustomers = CustomerDAO.getAllCustomers();
			listOfCustomers.add(newCustomer);
			// Send a success response
			writer.write(obj.writeValueAsString(listOfCustomers));

		} catch (Exception e) {
			writer.write(e.getMessage());
		}
	}
	

	@Override
	protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setCharacterEncoding("UTF-8");
		PrintWriter writer = resp.getWriter();
		resp.setContentType("application/json");

		String body = getBody(req);
		System.out.println("Request Body:\n" + body);

		try {
			ObjectMapper obj = new ObjectMapper();

			// Deserialize the JSON data from the request body into a Customer object
			Customer customerToDelete = obj.readValue(body, Customer.class);

			// Attempt to delete the customer from the data store
			boolean success = CustomerDAO.deleteCustomer(customerToDelete);

			if (success) {
				// If the deletion is successful, send a success response
				writer.write("{\"success\": true}");
			} else {
				// If the deletion fails, send an appropriate error response
				writer.write("{\"success\": false, \"error\": \"Failed to delete the customer\"}");
			}

		} catch (Exception e) {
			writer.write("{\"success\": false, \"error\": \"" + e.getMessage() + "\"}");
		}
	}

	public static String getBody(HttpServletRequest request) throws IOException {

		String body = null;
		StringBuilder stringBuilder = new StringBuilder();
		BufferedReader bufferedReader = null;

		try {
			InputStream inputStream = request.getInputStream();
			if (inputStream != null) {
				bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
				char[] charBuffer = new char[128];
				int bytesRead = -1;
				while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
					stringBuilder.append(charBuffer, 0, bytesRead);
				}
			} else {
				stringBuilder.append("");
			}
		} catch (IOException ex) {
			throw ex;
		} finally {
			if (bufferedReader != null) {
				try {
					bufferedReader.close();
				} catch (IOException ex) {
					throw ex;
				}
			}
		}

		body = stringBuilder.toString();
		return body;
	}

}
