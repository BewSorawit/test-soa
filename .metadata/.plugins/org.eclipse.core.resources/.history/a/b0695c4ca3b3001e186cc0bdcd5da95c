package order.controller;

import javax.servlet.http.HttpServlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.databind.ObjectMapper;

import order.dao.OrderDAO;
import order.entity.Order;

public class OrderNameServlet extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setCharacterEncoding("UTF-8");
		PrintWriter out = resp.getWriter();
		resp.setContentType("application/json");

		// Get the search query parameter from the request
		String searchName = req.getParameter("name");
		System.out.println("Search Name: " + searchName);
		if (searchName != null && !searchName.isEmpty()) {
			// Search for orders by name
			List<Order> matchingOrders = OrderDAO.getOrdersByName(searchName);

			// Convert the matching orders to JSON and send the response
			ObjectMapper objectMapper = new ObjectMapper();
			objectMapper.writeValue(out, matchingOrders);

		} else {
			// If no search parameter provided, return an empty response
			out.write("[]");
		}
	}

	@Override
	protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setCharacterEncoding("UTF-8");
		resp.setContentType("application/json");

		// Extracting customer ID from the request URL
		String pathInfo = req.getPathInfo();
		String[] pathParts = pathInfo.split("/");
		if (pathParts.length != 2) {
			resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			return;
		}

		String customerId = pathParts[1]; // Extracting customer ID

		// Getting the updated customer data from the request body
		String requestBody = getBody(req);

		try {
			ObjectMapper objectMapper = new ObjectMapper();
			Customer updatedCustomer = objectMapper.readValue(requestBody, Customer.class);

			// Assuming you have a method in CustomerDAO to update customer data
			boolean success = CustomerDAO.updateCustomer(customerId, updatedCustomer);

			if (success) {
				// If the update is successful, send a success response
				resp.setStatus(HttpServletResponse.SC_OK);
				resp.getWriter().write("{\"success\": true}");
			} else {
				// If the update fails, send an appropriate error response
				resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
				resp.getWriter().write("{\"success\": false, \"error\": \"Failed to update customer data\"}");
			}

		} catch (Exception e) {
			resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			resp.getWriter().write("{\"success\": false, \"error\": \"" + e.getMessage() + "\"}");
		}
	}
}
